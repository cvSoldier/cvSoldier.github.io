import{_ as l,W as s,X as r,Y as n,Z as e,$ as o,C as i}from"./framework-c8ebc670.js";const a={},_={id:"如何使用unity实现-饥荒-游戏中的效果",tabindex:"-1"},d=n("a",{class:"header-anchor",href:"#如何使用unity实现-饥荒-游戏中的效果","aria-hidden":"true"},"#",-1),c={href:"https://www.zhihu.com/question/39123966/answer/79837678",target:"_blank",rel:"noopener noreferrer"},h=n("br",null,null,-1),u=n("p",null,"它的视角可以切换，切换之后场景里除了地面之外所有物体的外观完全没有丝毫改变，这压根就是billboard。这些billboard的旋转中心（或者说local坐标的原点）在y＝0的位置上，所以一棵草，一个房子，甚至是构成墙体的一根柱子，它都是绕着扎根于地面的那一点旋转的一个面片，方向永远朝着玩家。",-1),p=n("p",null,"2.首先最高票说的没错 这就是个billboard的效果 不过完全没必要用粒子实现 甚至没必要特意billboard 把相机和场景中所有面片 即除地板以外的东西 共享一个旋转值不就完了",-1),b=n("p",null,[e("简单问题永远不要复杂化 "),n("em",null,"think it easy")],-1),f=n("br",null,null,-1),m={id:"耦合对于软件的危害",tabindex:"-1"},x=n("a",{class:"header-anchor",href:"#耦合对于软件的危害","aria-hidden":"true"},"#",-1),k={href:"https://zhuanlan.zhihu.com/p/411110704",target:"_blank",rel:"noopener noreferrer"},F=n("p",null,[e("在我们的日常开发中，可能会有一些人说，我也在开发中大量用到了Find，但是我没发生什么问题啊。是的，使用Find并不会立刻在软件中呈现出问题，因为有些软件的问题不会立刻发生，而是呈现出 "),n("u",null,[n("strong",null,"“发展事态”")]),e("，软件和食物差不多，市场上买回来的鲜鱼并不会因为没有立刻放入冰箱而发臭。游戏也不会因为用了Find方法立刻出现问题，而是会在软件的逐步发展中，慢慢腐烂，暴露出问题。")],-1),y=n("p",null,"使用诸如此类的Find手段，游戏的代码结构往往会出现很多发展特征，比如一个模块变化往往会连锁反应导致另一个模块变化，模块之间莫名其妙的Find依赖也使各个模块的组装拆卸需要更多的时间，特定的模块更难重用和测试。",-1),g=n("p",null,[e("就像上述的示例，"),n("u",null,[n("strong",null,"每一个Find都增加一次软件的熵，终有一天软件会爆发大混乱")]),e("。如果一个软件，团队中没有人知道执行这个方法会引发哪些后果，也没有人知道现在的结果究竟是哪些代码带来的，那么这个软件就接近于停滞了。")],-1);function v(w,z){const t=i("ExternalLinkIcon");return s(),r("div",null,[n("h3",_,[d,e(),n("a",c,[e("如何使用Unity实现“饥荒”游戏中的效果？"),o(t)])]),h,e(" 1. Don't starve是一个3D的场景，所有的物体都是由billboard渲染出来的。它场景中所有的物体模型都是一个单独的面片，它们本就是是平面风格而不是isometric风格，根本就不是45度格子拼出来的。 "),u,p,b,f,n("h3",m,[x,e(),n("a",k,[e("耦合对于软件的危害"),o(t)])]),F,y,g])}const E=l(a,[["render",v],["__file","碎片读物.html.vue"]]);export{E as default};
