import{_ as t,W as e,X as p,Y as a,Z as n,$ as l,a0 as c,C as o}from"./framework-c8ebc670.js";const i={},u=a("p",null,[n("本文将深度"),a("code",null,"ctrl c"),n(" + "),a("code",null,"ctrl v"),n(" 从HTLM解析，JavaScript解析，url解析角度看xss")],-1),r=a("h3",{id:"html解析",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#html解析","aria-hidden":"true"},"#"),n(" HTML解析")],-1),d={href:"https://html.spec.whatwg.org/multipage/parsing.html#tokenization",target:"_blank",rel:"noopener noreferrer"},k=a("img",{src:"https://segmentfault.com/img/bVcPsXH",alt:"image.png"},null,-1),m=c(`<h4 id="字符实体" tabindex="-1"><a class="header-anchor" href="#字符实体" aria-hidden="true">#</a> 字符实体</h4><p>刚做前端的时候,调整位置还用过<code>&amp;nbsp;</code>,(然后被师傅一顿骂)这个东西就是字符实体,</p><blockquote><p>字符实体是一个转义序列，它定义了一般无法在文本内容中输入的单个字符或符号。一个字符实体以一个&amp;符号开始，后面跟着一个预定义的实体的名称，或是一个#符号以及字符的十进制数字。</p></blockquote><p>有三种情况可以容纳字符实体 1 数据状态 2 RCDATA状态 3 属性值状态</p><p>在HTML里,像<code>&lt;</code>和<code>&gt;</code>会识别为标签开始结束,要想显示文本,就要使用对应的字符实体.但是在<code>&lt;textarea&gt;</code>里 输入<code>&lt;</code>就能正常显示.因为<code>&lt;textarea&gt;</code>属于RCDATA元素</p><p>HTML中共有五种元素 1 空元素 像<code>&lt;br/&gt;</code> 不能容纳任何内容 2 原始文本元素 有<code>&lt;script&gt;</code>和<code>&lt;style&gt;</code> 可以容纳文本 3 RCDATA元素 有<code>&lt;textarea&gt;</code>和<code>&lt;title&gt;</code> 可以容纳文本和字符引用 4 外部元素 像 <code>&lt;svg&gt;</code> 可以容纳文本,字符引用,CDATA段,其他元素和注释 5 基本元素 除上面之外的元素 可以容纳文本,字符引用,其他元素和注释</p><p>因为<code>textarea</code>是RCDATA元素,不能容纳其他元素,所以他里面只有<code>&lt;/textarea&gt;</code>会被识别为标签结束,其他<code>&lt;</code>是不会创建元素的. 对比</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 就会弹窗了 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>再对比</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token entity" title="&lt;">&amp;#60;</span>script<span class="token entity" title="&gt;">&amp;#62;</span>alert(1)<span class="token entity" title="&lt;">&amp;#60;</span>/script<span class="token entity" title="&gt;">&amp;#62;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 这就不会弹窗, 因为字符实体被解释为文本, 
不会进入“标签开始状态(Tag open state)” --&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以可以利用这种特性来对用户的输入进行转义, 来确保输入的数据只被解释为数据.</p><p>因为解析字符实体是在HTML解析阶段,所以在<code>&lt;script&gt;</code>标签中使用HTML字符实体是没有用的,例如</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">alert<span class="token operator">&amp;</span>#<span class="token number">40</span><span class="token punctuation">;</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 不止不会弹窗, 甚至会报一个 Uncaught SyntaxError 的错
因为js的解析不认识HTML字符实体 --&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 这个就会弹窗了, 因为svg 遵循 xml 定义,
在 xml 中除了&lt;![CDATA[和]]&gt;包含的实体, 其他会自动转义,
而且 svg 中可以包含 script 标签, 所以成功弹窗 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">alert<span class="token operator">&amp;</span>#<span class="token number">40</span><span class="token punctuation">;</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="url解析" tabindex="-1"><a class="header-anchor" href="#url解析" aria-hidden="true">#</a> url解析</h3><p>url使用UTF-8编码类型来编码每一个字符.而且不能对协议类型进行任何的编码操作，不然URL解析器会认为它无类型。比如：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>%6a%61%76%61%73%63%72%69%70%74:%61%6c%65%72%74%28%31%29<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 不会弹窗 --&gt;</span>
<span class="token comment">&lt;!-- decodeURI(href) === &#39;javascript:alert(1)&#39; --&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为URL中被编码的 &quot;javascript&quot; 没有被解码，因此不会被URL解析器识别。该原则对协议后面的&quot;:&quot;（冒号）同样适用,比如：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>javascript%3aalert(1)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 不会弹窗 --&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>前文讲过，属性值状态下是可以使用字符实体的，也就是说可以把url协议的部分使用字符实体编码：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token entity" title="j">&amp;#x6a;</span><span class="token entity" title="a">&amp;#x61;</span><span class="token entity" title="v">&amp;#x76;</span><span class="token entity" title="a">&amp;#x61;</span><span class="token entity" title="s">&amp;#x73;</span><span class="token entity" title="c">&amp;#x63;</span><span class="token entity" title="r">&amp;#x72;</span><span class="token entity" title="i">&amp;#x69;</span><span class="token entity" title="p">&amp;#x70;</span><span class="token entity" title="t">&amp;#x74;</span>:%61%6c%65%72%74%28%31%29<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 会弹窗 --&gt;</span>
<span class="token comment">&lt;!-- 把 &amp;#x6a 换成 &amp;#106 是一样的  
parseInt(&#39;6a&#39;, 16) === 106--&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="javascript解析" tabindex="-1"><a class="header-anchor" href="#javascript解析" aria-hidden="true">#</a> JavaScript解析</h3><p>最常用的如\\uXXXX这种写法为Unicode转义序列，表示一个字符，其中xxxx表示一个16进制数字，如 <code>&lt;</code> 的Unicode编码为\\u003c。举个栗子：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">onerror</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token value javascript language-javascript">\\u0061\\u006c\\u0065\\u0072\\u0074\\u0028\\u0031\\u0029</span></span></span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- decodeURI(listener) === &#39;alert(1)&#39; --&gt;</span>
<span class="token comment">&lt;!-- 不会弹窗 --&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为当用Unicode转义序列来表示一个控制字符时，例如单引号、双引号、圆括号等等，它们将不会被解释成控制字符，而仅仅被解码并解析为标识符名称或者字符串常量,我们放开控制字符，应该就可以了吧：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">onerror</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token value javascript language-javascript">\\u0061\\u006c\\u0065\\u0072\\<span class="token function">u0074</span><span class="token punctuation">(</span>\\u0031<span class="token punctuation">)</span></span></span></span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 卜会弹窗 --&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，unicode转义序列表示一个字符，<code>\\u0031</code>被解码为字符串 <code>1</code>,所以还需要用引号。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>&lt;img src=&quot;1&quot; onerror=\\u0061\\u006c\\u0065\\u0072\\u0074(&#39;\\u0031&#39;)&gt;
<span class="token comment">&lt;!-- 会弹窗 --&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="解析顺序" tabindex="-1"><a class="header-anchor" href="#解析顺序" aria-hidden="true">#</a> 解析顺序</h3><p>当浏览器从网络中获得一段内容后，触发HTML解析器来对这篇文档进行词法解析。在这一步中字符引用被解码。在词法解析完成后，DOM树就被创建好了，JavaScript解析器会介入来对脚本进行解析。在这一步中Unicode转义序列和Hex转义序列被解码。同时，如果浏览器遇到需要URL的上下文，URL解析器也会介入来解码URL内容。在这一步中URL解码操作被完成。由于URL位置不同，URL解析器可能会在JavaScript解析器之前或之后进行解析。比如</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UserInput<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>HTML解析器将首先开始工作，并对UserInput中的字符引用进行解码。然后URL解析器开始对href值进行URL解码。最后，如果URL资源类型是JavaScript，那么JavaScript解析器会进行Unicode转义序列和Hex转义序列的解码。再之后，解码的脚本会被执行。</p><h3 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h3><p>http://bobao.360.cn/learning/detail/292.html<br> https://xz.aliyun.com/t/5863</p>`,35);function g(v,h){const s=o("ExternalLinkIcon");return e(),p("div",null,[u,r,a("p",null,[n("HTML词法解析细则在"),a("a",d,[n("传送门"),l(s)]),n(" 下面不会详细介绍所有内容，只会解释HTML解释器这个状态机是如何工作的， HTML解析器作为一个状态机，它从输入流中获取字符并按照转换规则转换到另一种状态。在解析过程中，任何时候它只要遇到一个<符号（后面没有跟/符号）就会进入“标签开始状态(Tag open state)”。然后转变到“标签名状态(Tag name state)”，“前属性名状态(before attribute name state)”……最后进入“数据状态(Data state)”并释放当前标签的token。当解析器处于“数据状态(Data state)”时，它会继续解析，每当发现一个完整的标签，就会释放出一个token。 "),k]),m])}const x=t(i,[["render",g],["__file","从浏览器解码看xss.html.vue"]]);export{x as default};
