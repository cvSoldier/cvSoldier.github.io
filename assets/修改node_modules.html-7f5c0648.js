import{_ as n,W as s,X as a,a0 as e}from"./framework-c8ebc670.js";const t={},p=e(`<h3 id="起因" tabindex="-1"><a class="header-anchor" href="#起因" aria-hidden="true">#</a> 起因</h3><p>起因是使用ant-design-vue组件的tree时，我的需求是父节点收起后能继续选中子节点，但是组件库的代码逻辑里，是否渲染子节点完全基于是否展开</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ant-design-vue/components/vc-tree/src/TreeNode.jsx</span>
<span class="token comment">// version: &quot;1.7.8&quot;</span>
<span class="token function">renderChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>expanded<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    $children <span class="token operator">=</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>ul
        <span class="token keyword">class</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">classNames</span><span class="token punctuation">(</span>
          <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>prefixCls<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-child-tree</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
          expanded <span class="token operator">&amp;&amp;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>prefixCls<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-child-tree-open</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">}</span>
        data<span class="token operator">-</span>expanded<span class="token operator">=</span><span class="token punctuation">{</span>expanded<span class="token punctuation">}</span>
        role<span class="token operator">=</span><span class="token string">&quot;group&quot;</span>
      <span class="token operator">&gt;</span>
        <span class="token punctuation">{</span><span class="token function">mapChildren</span><span class="token punctuation">(</span>nodeList<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">renderTreeNode</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> index<span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>transition <span class="token punctuation">{</span><span class="token operator">...</span>animProps<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>$children<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>transition<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单的改动方式就是用v-show来渲染children：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 打包之后的node_modules代码</span>
<span class="token keyword">var</span> $children <span class="token operator">=</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token comment">// if (expanded) {</span>
$children <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span>
  <span class="token string">&#39;ul&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token string-property property">&#39;class&#39;</span><span class="token operator">:</span> <span class="token function">classNames</span><span class="token punctuation">(</span>prefixCls <span class="token operator">+</span> <span class="token string">&#39;-child-tree&#39;</span><span class="token punctuation">,</span> expanded <span class="token operator">&amp;&amp;</span> prefixCls <span class="token operator">+</span> <span class="token string">&#39;-child-tree-open&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">attrs</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;data-expanded&#39;</span><span class="token operator">:</span> expanded<span class="token punctuation">,</span>
      <span class="token literal-property property">role</span><span class="token operator">:</span> <span class="token string">&#39;group&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">directives</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;show&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">value</span><span class="token operator">:</span> expanded<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token function">mapChildren</span><span class="token punctuation">(</span>nodeList<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">renderTreeNode</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> index<span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改之后生效了，但是怎么把本地node_modules的改动同步到远端。</p><h3 id="解决方法" tabindex="-1"><a class="header-anchor" href="#解决方法" aria-hidden="true">#</a> 解决方法</h3><p>1.去提issue或者pr。<br> 2.官方不给改的话，可以使用patch-package，下面说如何操作</p><h4 id="第一步-安装依赖" tabindex="-1"><a class="header-anchor" href="#第一步-安装依赖" aria-hidden="true">#</a> 第一步 安装依赖</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm i patch-package postinstall-postinstall --save-dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="第二步-修改package-json" tabindex="-1"><a class="header-anchor" href="#第二步-修改package-json" aria-hidden="true">#</a> 第二步 修改package.json</h4><div class="language-JSON line-numbers-mode" data-ext="JSON"><pre class="language-JSON"><code>&quot;scripts&quot;: {
  &quot;postinstall&quot;: &quot;npx patch-package&quot;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="第三步-修改-node-modules-文件-并生成修改文件" tabindex="-1"><a class="header-anchor" href="#第三步-修改-node-modules-文件-并生成修改文件" aria-hidden="true">#</a> 第三步 修改 node_modules 文件，并生成修改文件</h4><p>修改之后执行</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npx patch-package \${修改的包名}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行之后会在node_modules同级生成patches文件夹<br> ├── node_modules<br> ├── patches<br> │ └── 包名.patch</p><h4 id="第四步-测试" tabindex="-1"><a class="header-anchor" href="#第四步-测试" aria-hidden="true">#</a> 第四步 测试</h4><p>重装依赖，对 node_modules 下代码的修改还是被 patch-package 还原并最终生效。</p>`,18),o=[p];function c(i,l){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","修改node_modules.html.vue"]]);export{r as default};
