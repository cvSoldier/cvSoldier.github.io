import{_ as s,W as a,X as t,Y as e,Z as o,$ as i,a0 as c,C as r}from"./framework-c8ebc670.js";const p={},l=c(`<p>Nodejs is single threaded, and the code execution never gets interrupted inside an event loop, so locking is unnecessary? This is true ONLY IF your critical section can be executed inside a single event loop. However, if you have any async code inside your critical section (it can be simply triggered by any I/O operation, or timer), your critical logic will across multiple event loops, therefore it&#39;s not concurrency safe!</p><p>Consider the following code</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>redis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	redis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">,</span> value <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The above code simply multiply a redis key by 2. However, if two users run concurrently, the execution order may like this</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>user1: redis.get(&#39;key&#39;) -&gt; 1
user2: redis.get(&#39;key&#39;) -&gt; 1
user1: redis.set(&#39;key&#39;, 1 x 2) -&gt; 2
user2: redis.set(&#39;key&#39;, 1 x 2) -&gt; 2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Obviously it&#39;s not what you expected</p>`,6),u={href:"https://www.npmjs.com/package/async-lock",target:"_blank",rel:"noopener noreferrer"};function d(k,v){const n=r("ExternalLinkIcon");return a(),t("div",null,[l,e("p",null,[e("a",u,[o("来源"),i(n)])])])}const g=s(p,[["render",d],["__file","为什么node也需要锁.html.vue"]]);export{g as default};
