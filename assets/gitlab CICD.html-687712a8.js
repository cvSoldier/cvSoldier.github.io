import{_ as t,W as l,X as r,Y as e,Z as n,$ as s,a0 as i,C as c}from"./framework-c8ebc670.js";const d="/assets/gitlabCICD/chmod.png",o="/assets/gitlabCICD/github-runner.jpg",p="/assets/gitlabCICD/root.jpg",u="/assets/gitlabCICD/deploy-cache.jpg",b="/assets/gitlabCICD/deploy-without-cache.jpg",m="/assets/gitlabCICD/result.jpg",g="/assets/gitlabCICD/cache-before.jpg",v="/assets/gitlabCICD/cache-after.jpg",h={},x=i(`<h3 id="配ci-cd" tabindex="-1"><a class="header-anchor" href="#配ci-cd" aria-hidden="true">#</a> 配CI/CD</h3><p>1.查看linux系统版本</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>cat /proc/version
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.根据不同版本安装</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># Linux x86-64
sudo wget -O /usr/local/bin/gitlab-runner https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-amd64

 # Linux x86
sudo wget -O /usr/local/bin/gitlab-runner https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-386

 # Linux arm
sudo wget -O /usr/local/bin/gitlab-runner https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-arm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.给gitlab-runner执行权限</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>chmod +x /usr/local/bin/gitlab-runner
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>LINUX下不同的文件类型有不同的颜色,<br> 蓝色表示目录;<br> 绿色表示可执行文件，可执行的程序;<br> 红色表示压缩文件或包文件;<br> 浅蓝色表示链接文件;<br> 灰色表示其它文件;<br> 红色闪烁表示链接的文件有问题了<br> 黄色表示设备文件.<br> 因此如果只是普通的上传startPM2.sh这个文件，那么上传之后也就是一个普通的文件，不能执行 你不 chmod +x 颜色就是普通文本的颜色，+x 之后颜色就是绿色的了。chmod -x 就是普通文本颜色，普通文本颜色是不能执行的，执行会报错；chmod +x 就是绿色的可执行文件了。</p><p><img src="`+d+`" alt=""></p><p>4.创建一个gitlab-runner用户，之后使用CI/CD时，都是在这个用户下进行的</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>useradd --comment &#39;GitLab Runner&#39; --create-home gitlab-runner --shell /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>5.安装,启动</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>gitlab-runner install --user=gitlab-runner --working-directory=/home/gitlab-runner
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>gitlab-runner start
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="clone-url" tabindex="-1"><a class="header-anchor" href="#clone-url" aria-hidden="true">#</a> clone_url</h2>`,15),k=e("code",null,"git clone",-1),_={href:"https://docs.gitlab.com/runner/configuration/advanced-configuration.html#how-clone_url-works",target:"_blank",rel:"noopener noreferrer"},f=i(`<h2 id="踩坑" tabindex="-1"><a class="header-anchor" href="#踩坑" aria-hidden="true">#</a> 踩坑</h2><h3 id="git-fetch-pack" tabindex="-1"><a class="header-anchor" href="#git-fetch-pack" aria-hidden="true">#</a> git fetch-pack</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Reinitialized existing Git repository in /home/gitlab-runner/builds/dLoFQVz-/0/qkt/pepper-vue/.git/
fatal: git fetch-pack: expected shallow list
fatal: The remote end hung up unexpectedly
ERROR: Job failed: exit status 1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果runner的机器git版本时1.x，升级到2解决问题。</p><h3 id="gitlab-runner用户" tabindex="-1"><a class="header-anchor" href="#gitlab-runner用户" aria-hidden="true">#</a> gitlab-runner用户</h3><p>安装 gitlab-runner 构建机默认会将用户设置为 gitlab-runner，该设置会导致.gitlab-ci.yml 脚本运行时出现一些权限问题。为了解决这些权限问题，将 gitlab-runner 的默认用户设置为 root。<br> 执行</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ps aux | grep gitlab-runner
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果：<br><img src="`+o+`" alt=""> 顺序执行下面命令</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>gitlab-runner uninstall
gitlab-runner install --user root
gitlab-runner restart
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次执行 <code>ps aux | grep gitlab-runner</code>，user改为了root ：<br><img src="`+p+`" alt=""></p><h3 id="cache-和-artifacts" tabindex="-1"><a class="header-anchor" href="#cache-和-artifacts" aria-hidden="true">#</a> cache 和 artifacts</h3><p>cache：存储项目的dependencies，比如node_modules，不需要每次跑pipeline都重新安装。</p><p>artifacts：用来在stage之间传递stage生成物，在不同的pipline之间不可用。</p><p>开始为了能让node_modules和dist能在各个stage共享，都写在了根节点：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>cache:
  paths:
    - node_modules
    - dist
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>导致比如deploy的阶段，即使没有使用到node_modules,也会浪费时间去检查、更新缓存: <img src="`+u+`" alt=""> 阶段共耗时1m 8s，但是实际执行部署脚本只有2s，检查和更新缓存消耗14s + 50s = 1m 4s。</p><p>其实可以为每个不同的job定制不同的缓存策略：<br> 比如install阶段：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>cache:
  paths:
    - node_modules/
  policy: pull-push # 获取和更新缓存
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>build阶段：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>cache:
  paths:
    - node_modules
  policy: pull # 只需要获取缓存用来build
artifacts: # dist不需要写在cache里，只需要在build阶段传递到deploy
  name: &#39;bundle&#39;
  paths: 
    - dist
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>deploy就不用写cache了。<br> 修改之后 deploy 阶段仅耗时几秒：<br><img src="`+b+'" alt=""></p><p>整体结果快了一倍左右：<br><img src="'+m+`" alt=""></p><h3 id="新的问题" tabindex="-1"><a class="header-anchor" href="#新的问题" aria-hidden="true">#</a> 新的问题</h3><p>由于上面build阶段对缓存的策略只有pull，导致不能更新在构建过程中loader或者plugin产生的默认存在 node_modules/.cache的缓存，上面截图时间缩短是因为存在全局的cache还没有失效。<br> 首先需要把构建的缓存文件单拎出来：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vue.config.js</span>
<span class="token function-variable function">chainWebpack</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> jsRule <span class="token operator">=</span> config<span class="token punctuation">.</span>module<span class="token punctuation">.</span><span class="token function">rule</span><span class="token punctuation">(</span><span class="token string">&#39;js&#39;</span><span class="token punctuation">)</span>
  jsRule<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;babel-loader&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">cacheDirectory</span><span class="token operator">:</span> <span class="token string">&#39;.cache/babel-loader&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  jsRule<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;cache-loader&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    options<span class="token punctuation">.</span>cacheDirectory <span class="token operator">=</span> <span class="token string">&#39;.cache/cache-loader&#39;</span>
    <span class="token keyword">return</span> options
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在 .gitignore 中添加缓存目录</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 打包的缓存文件
.cache
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就把构建产生的缓存文件和node_modules拆开了。<br> 再改<code>.gitlab-ci.yml</code>：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>build-job:
  stage: build
  cache:
    paths:
      - .cache
    policy: pull-push # 默认就是pull-push，再写一遍强调
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只缓存 .cache 目录来使加速 runner 更新自身缓存的速度。<br> 修改前后pull-push缓存耗时对比： <img src="`+g+'" alt=""><br><img src="'+v+`" alt=""></p><p>install阶段的 node_modules 的缓存，可以通过 <code>GIT_CLEAN_FLAGS</code> 阻止每次检出时删除node_modules：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>variables:
  GIT_CLEAN_FLAGS: -fdx -e node_modules/ # 控制检出源后 git clean 的默认行为。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>同时，为了避免服务器上的 node_modules 体积不断变大，可以使用npm ci代替 npm i来安装依赖，npm ci还会根据 package-lock.json 强制锁定版本，避免本地和线上因为依赖版本不一致导致的奇怪bug。</p><h3 id="自动打tag、更新changelog" tabindex="-1"><a class="header-anchor" href="#自动打tag、更新changelog" aria-hidden="true">#</a> 自动打tag、更新changelog</h3><p>使用<code>standard-version</code>打标签<br> 需要注意的有2:</p>`,35),C={href:"https://docs.gitlab.com/ee/user/project/push_options.html#push-options-for-gitlab-cicd",target:"_blank",rel:"noopener noreferrer"},y={href:"https://docs.gitlab.com/ee/ci/pipelines/#skip-a-pipeline",target:"_blank",rel:"noopener noreferrer"},j={href:"https://gitlab.com/guided-explorations/gitlab-ci-yml-tips-tricks-and-hacks/commit-to-repos-during-ci/commit-to-repos-during-ci/-/blob/master/.gitlab-ci.yml",target:"_blank",rel:"noopener noreferrer"},w=e("code",null,"HEAD",-1),D={href:"https://git-scm.com/docs/git-push#Documentation/git-push.txt-codegitpushoriginHEADmastercode",target:"_blank",rel:"noopener noreferrer"},I=e("div",{class:"language-text line-numbers-mode","data-ext":"text"},[e("pre",{class:"language-text"},[e("code",null,` git push origin HEAD:branch-name
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1);function L(E,R){const a=c("ExternalLinkIcon");return l(),r("div",null,[x,e("p",null,[n("配置runner的机器不能直接访问到gitlab，可以设置clone_url来配置"),k,n("时的url。"),e("a",_,[n("how-clone_url-works"),s(a)])]),f,e("ol",null,[e("li",null,[n("更新完changelog会有一个提交，为了避免循环触发pipeline，需要借助 "),e("a",C,[n("push options"),s(a)]),n(" 或者 "),e("a",y,[n("在commit的msg中携带特殊字符串"),s(a)]),n(" 来跳过skip，任意一个方式就可以。可以参考 "),e("a",j,[n("gitlab的官方样例"),s(a)]),n("，他的样例中 -o ci-skip是错的，应该是ci.skip。")]),e("li",null,[n("不能直接 push origin branch-name ，因为ci脚本的本地代码没有分支，需要使用 "),w,n(" 关键字，"),e("a",D,[n("（文档链接）"),s(a)]),n("："),I])])])}const N=t(h,[["render",L],["__file","gitlab CICD.html.vue"]]);export{N as default};
